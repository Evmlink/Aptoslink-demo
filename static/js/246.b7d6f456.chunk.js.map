{"version":3,"file":"static/js/246.b7d6f456.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts"],"sourcesContent":["import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n      return this.solanaProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\",\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n"],"names":["SolanaWalletAdapter","BaseSolanaAdapter","constructor","params","super","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","this","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","solanaProvider","_","Error","async","options","init","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","blockExplorerUrl","logo","torusInstance","Torus","log","showTorusButton","TorusInjectedProvider","config","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","checkConnectionRequirements","WalletInitializationError","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","code","setProvider","reconnected","WalletLoginError","cleanup","disconnectSession","logout","disconnect","getUserInfo","checkAddChainRequirements","addChainConfig","checkSwitchChainRequirements","getChainConfig","_this$torusInstance","setAdapterSettings"],"sourceRoot":""}