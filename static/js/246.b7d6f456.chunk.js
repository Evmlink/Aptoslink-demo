"use strict";(self.webpackChunkaptoslink_example=self.webpackChunkaptoslink_example||[]).push([[246],{88246:(t,i,s)=>{s.r(i),s.d(i,{SolanaWalletAdapter:()=>h});var n=s(19677),e=s(20240),a=s(13411),r=s(29314),o=s(44879),c=s(86319);class h extends o.v{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(t),(0,e.Z)(this,"name",r.rW.TORUS_SOLANA),(0,e.Z)(this,"adapterNamespace",r.yk.SOLANA),(0,e.Z)(this,"currentChainNamespace",r.EN.SOLANA),(0,e.Z)(this,"type",r.hN.EXTERNAL),(0,e.Z)(this,"status",r.MP.NOT_READY),(0,e.Z)(this,"torusInstance",null),(0,e.Z)(this,"torusWalletOptions",void 0),(0,e.Z)(this,"initParams",void 0),(0,e.Z)(this,"loginSettings",{}),(0,e.Z)(this,"solanaProvider",null),this.torusWalletOptions=t.adapterSettings||{},this.initParams=t.initParams||{},this.loginSettings=t.loginSettings||{}}get provider(){return this.status!==r.MP.NOT_READY&&this.solanaProvider?this.solanaProvider:null}set provider(t){throw new Error("Not implemented")}async init(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};await super.init(t),super.checkInitializationRequirements();const{chainId:i,blockExplorer:s,displayName:e,rpcTarget:o,ticker:h,tickerName:l}=this.chainConfig,d={chainId:i,rpcTarget:o,blockExplorerUrl:s,displayName:e,tickerName:l,ticker:h,logo:""};this.torusInstance=new a.ZP(this.torusWalletOptions),r.cM.debug("initializing torus solana adapter init"),await this.torusInstance.init((0,n.Z)((0,n.Z)({showTorusButton:!1},this.initParams),{},{network:d})),this.solanaProvider=new c.TorusInjectedProvider({config:{chainConfig:this.chainConfig}}),this.status=r.MP.READY,this.emit(r.n2.READY,r.rW.TORUS_SOLANA);try{r.cM.debug("initializing torus solana adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(u){r.cM.error("Failed to connect with cached torus solana provider",u),this.emit(r.n2.ERRORED,u)}}async connect(){if(super.checkConnectionRequirements(),!this.torusInstance)throw r.Ty.notReady("Torus wallet is not initialized");if(!this.solanaProvider)throw r.Ty.notReady("Torus wallet is not initialized");this.status=r.MP.CONNECTING,this.emit(r.n2.CONNECTING,{adapter:r.rW.TORUS_SOLANA});try{await this.torusInstance.login(this.loginSettings);try{const t=this.torusInstance.provider;t.sendTransaction=this.torusInstance.sendTransaction.bind(this.torusInstance),t.signAllTransactions=this.torusInstance.signAllTransactions.bind(this.torusInstance),t.signMessage=this.torusInstance.signMessage.bind(this.torusInstance),t.signTransaction=this.torusInstance.signTransaction.bind(this.torusInstance),await this.solanaProvider.setupProvider(t)}catch(t){if(!(t instanceof r.up&&5010===t.code))throw t;{const{chainId:t,blockExplorer:i,displayName:s,rpcTarget:n,ticker:e,tickerName:a}=this.chainConfig,r={chainId:t,rpcTarget:n,blockExplorerUrl:i,displayName:s,tickerName:a,ticker:e,logo:""};await this.torusInstance.setProvider(r)}}return this.status=r.MP.CONNECTED,this.torusInstance.showTorusButton(),this.emit(r.MP.CONNECTED,{adapter:r.rW.TORUS_SOLANA,reconnected:this.rehydrated}),this.provider}catch(t){if(this.status=r.MP.READY,this.rehydrated=!1,this.emit(r.n2.ERRORED,t),t instanceof r.up)throw t;throw r.RM.connectionError("Failed to login with torus solana wallet")}}async disconnect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(await super.disconnectSession(),!this.torusInstance)throw r.Ty.notReady("Torus wallet is not initialized");await this.torusInstance.logout(),t.cleanup?(this.status=r.MP.NOT_READY,this.torusInstance=null,this.solanaProvider=null):this.status=r.MP.READY,await super.disconnect()}async getUserInfo(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!this.torusInstance)throw r.Ty.notReady("Torus wallet is not initialized");return await this.torusInstance.getUserInfo()}async addChain(t){let i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkAddChainRequirements(t,i),this.addChainConfig(t)}async switchChain(t){var i;let s=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkSwitchChainRequirements(t,s);const n=this.getChainConfig(t.chainId);await(null===(i=this.torusInstance)||void 0===i?void 0:i.setProvider({rpcTarget:n.rpcTarget,chainId:n.chainId,displayName:n.displayName,blockExplorerUrl:n.blockExplorer,ticker:n.ticker,tickerName:n.tickerName,logo:"https://images.web3auth.io/login-torus-solana.svg"})),this.setAdapterSettings({chainConfig:this.getChainConfig(t.chainId)})}}}}]);
//# sourceMappingURL=246.b7d6f456.chunk.js.map